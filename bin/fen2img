#!/usr/local/bin/lua
---------------------------------------------------------------------
--     This Lua5 script is Copyright (c) 2018, Peter J Billam      --
--                       www.pjb.com.au                            --
--  This script is free software; you can redistribute it and/or   --
--         modify it under the same terms as Lua5 itself.          --
---------------------------------------------------------------------
local Version = '1.0  for Lua5'
local VersionDate  = '11apr2018';
local Synopsis = [[
fen2img [-w 350] \
  'rnb1k1nr/pppp1ppp/8/4p3/3b3q/4PPP1/PPP2K1P/RNBQ1BNR b KQkq - 0 5' \
   output.png
# default width is 400 pixels
# output file can be a .jpg or .png or .eps
]]

local FEN = require 'chess.fen'

Width  = 400;

local iarg=1; while arg[iarg] ~= nil do
	if not string.find(arg[iarg], '^-[a-z]') then break end
	local first_letter = string.sub(arg[iarg],2,2)
	if first_letter == 'v' then
		local n = string.gsub(arg[0],"^.*/","",1)
		print(n.." version "..Version.."  "..VersionDate)
		os.exit(0)
	elseif first_letter == 'w' then
		iarg = iarg + 1
		Width = tonumber( arg[iarg] )
	else
		local n = string.gsub(arg[0],"^.*/","",1)
		print(n.." version "..Version.."  "..VersionDate.."\n\n"..Synopsis)
		os.exit(0)
	end
	iarg = iarg+1
end

function round(x) return math.floor(x+0.5) end
function warn(...)
    local a = {}
    for k,v in pairs{...} do table.insert(a, tostring(v)) end
    io.stderr:write(table.concat(a),'\n') ; io.stderr:flush()
end
function die(...) warn(...);  os.exit(1) end

Height = round(Width * 0.95)
Dx     = round(Width * 0.1)

Fenstr  = arg[iarg]
if not Fenstr then die('must specify FEN string') end
Output  = arg[iarg+1]
if not Output then die('must specify output file') end
-- https://www.ghostscript.com/doc/9.21/Devices.htm#PNG
ext2dev = { jpg='jpeg', png='png16m', JPG='jpeg', PNG='png16m', eps='eps' }
extension = string.match(Output,'%.(%a%a%a)$')
if not extension then die('unrecognised extension in file ',Output) end
Device  = ext2dev[extension]
if not Device then die('unrecognised extension ',extension) end
-- print(Fenstr) ; print(Fenstr) ; print(Output)
-- print(extension) ; print(Device) ; os.exit()

PS_sections = { "%!PS-Adobe-3.0 EPSF-3.0\n%%BoundingBox: 0 0 ", }
table.insert(PS_sections, tostring(Width)..' '..tostring(Height))
table.insert(PS_sections, [[

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%           This EPS is Copyright (c) 2018, Peter J Billam              %
% Permission is granted  to any individual or institution to use, copy, %
% modify or redistribute this software, so long as it is not resold for %
% profit, and provided this notice is retained. It is provided "as is", %
% without any express or implied warranty.    http://www.pjb.com.au     %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Needs:  http://homepages.di.fc.ul.pt/~jpn/gv/tabs/chessfont.zip
% which unzips to a TTF file which you move into /usr/share/fonts/truetype
% See:  http://homepages.di.fc.ul.pt/~jpn/gv/tabs/chess-template.eps
% by Joao Pedro Neto  2016
% ( In JS:  https://github.com/jhlywa/chess.js/blob/master/README.md )
%%EndComments
%%BeginProlog
%---------------- Constants -------------------
]])

table.insert(PS_sections, '/Chess.dx '..tostring(Dx)..' def\n')

table.insert(PS_sections, [[
/PlaceAt {   % call: r(ow) c(ol)
	5 dict begin
    /col exch def /row exch def
    Chess.dx col mul Chess.dx row mul moveto    
	end
} bind def
/Square {   % call: row col
	5 dict begin
    /col exch def /row exch def
    col row add 2 mod 0 eq {
      row col Black
    } {
      row col White
    } ifelse 
	end
} bind def
/Black {   % call: row col
	5 dict begin
    /col exch def /row exch def
    row col PlaceAt (+) show
	end
} bind def
/White {   % call: row col
	5 dict begin
    /col exch def /row exch def
    row col PlaceAt (*) show
	end
} bind def
/PawnW {   % call: row col
	5 dict begin
    /col exch def /row exch def
    col row add 2 mod 0 eq {
      row col PlaceAt (P) show
    } {
      row col PlaceAt (p) show
    } ifelse 
	end
} bind def
/PawnB {   % call: row col
	5 dict begin
    /col exch def /row exch def
    col row add 2 mod 0 eq {
      row col PlaceAt (O) show
    } {
      row col PlaceAt (o) show
    } ifelse 
	end
} bind def
/KnightW {   % call: row col
	5 dict begin
    /col exch def /row exch def
    col row add 2 mod 0 eq {
      row col PlaceAt (H) show
    } {
      row col PlaceAt (h) show
    } ifelse 
	end
} bind def
/KnightB {   % call: row col
	5 dict begin
    /col exch def /row exch def
    col row add 2 mod 0 eq {
      row col PlaceAt (J) show
    } {
      row col PlaceAt (j) show
    } ifelse 
	end
} bind def
/BishopW {   % call: row col
	5 dict begin
    /col exch def /row exch def
    col row add 2 mod 0 eq {
      row col PlaceAt (B) show
    } {
      row col PlaceAt (b) show
    } ifelse 
	end
} bind def
/BishopB {   % call: row col
	5 dict begin
    /col exch def /row exch def
    col row add 2 mod 0 eq {
      row col PlaceAt (N) show
    } {
      row col PlaceAt (n) show
    } ifelse 
	end
} bind def
/RookW {   % call: row col
	5 dict begin
    /col exch def /row exch def
    col row add 2 mod 0 eq {
      row col PlaceAt (R) show
    } {
      row col PlaceAt (r) show
    } ifelse 
	end
} bind def
/RookB {   % call: row col
	5 dict begin
    /col exch def /row exch def
    col row add 2 mod 0 eq {
      row col PlaceAt (T) show
    } {
      row col PlaceAt (t) show
    } ifelse 
	end
} bind def
/QueenW {   % call: row col
	5 dict begin
    /col exch def /row exch def
    col row add 2 mod 0 eq {
      row col PlaceAt (Q) show
    } {
      row col PlaceAt (q) show
    } ifelse 
	end
} bind def
/QueenB {   % call: row col
	5 dict begin
    /col exch def /row exch def
    col row add 2 mod 0 eq {
      row col PlaceAt (W) show
    } {
      row col PlaceAt (w) show
    } ifelse 
	end
} bind def
/KingW {   % call: row col
	5 dict begin
    /col exch def /row exch def
    col row add 2 mod 0 eq {
      row col PlaceAt (K) show
    } {
      row col PlaceAt (k) show
    } ifelse 
	end
} bind def
/KingB {   % call: row col
	5 dict begin
    /col exch def /row exch def
    col row add 2 mod 0 eq { row col PlaceAt (L) show
    } { row col PlaceAt (l) show
    } ifelse 
	end
} bind def
/Board {   % call: position (<- array) flip (<- bool)
	20 dict begin
    /flip exch def /pos  exch def
    /cols 8 def  /rows 8 def
    1 1 rows {    % for each row
        /i exch def
        flip {  % write row coords
          i -0.25 [( 0)( 1)( 2)( 3)( 4)( 5)( 6)( 7)( 8)] 9 i sub get Label
		} {
          i -0.25 [( 0)( 1)( 2)( 3)( 4)( 5)( 6)( 7)( 8)] i get Label
        } ifelse 
	   /ChessPiece findfont Chess.dx scalefont setfont
        i 0 PlaceAt (/) show
        1 1 cols {    % for each column
		  /ChessPiece findfont Chess.dx scalefont setfont
          /j exch def     
          % get (i,j)  from the board-array index
          pos i 1 sub cols mul j 1 sub add get
          /piece exch def     
		  flip {
          	9 rows i sub 1 add sub  9 j sub
		  } {
          	rows i sub 1 add   j 
		  } ifelse
          piece   0 eq { Square  } if
          piece   1 eq { PawnW   } if
          piece  -1 eq { PawnB   } if
          piece   2 eq { KnightW } if
          piece  -2 eq { KnightB } if
          piece   3 eq { BishopW } if
          piece  -3 eq { BishopB } if
          piece   4 eq { RookW   } if
          piece  -4 eq { RookB   } if
          piece   5 eq { QueenW  } if
          piece  -5 eq { QueenB  } if
          piece   6 eq { KingW   } if
          piece  -6 eq { KingB   } if
        } for
        i cols 1 add PlaceAt (\\) show
        1 1 cols {    % draw upper and bottom lines
          /j exch def     
          0 j PlaceAt (_) show
          rows 1 add j PlaceAt (-) show
          flip {  % write column coords
            0 j [(a)(b)(c)(d)(e)(f)(g)(h)] 8 j sub get Label
		  } {
            0 j [(a)(b)(c)(d)(e)(f)(g)(h)] j 1 sub get Label
          } ifelse
        } for
    } for
	end
} bind def
/Label {   % call: row col string
	10 dict begin
	[ /s /c /r ] { exch def } forall
    gsave       
    Chess.dx 4 div Chess.dx 5 div translate 
	/coordsize   Chess.dx 0.55 mul  def
    /Courier findfont coordsize scalefont setfont
    r 9 gt {      % if the number is 10 or greater
      /basefont /Courier findfont def   % it will condense font to fit size
      basefont [coordsize 2 div 0 0 coordsize 0 0] makefont setfont
      r c 0.4 add PlaceAt 
    } {
      r c PlaceAt 
    } ifelse
    s show
    grestore
	end
} bind def
/Marker {  % call: j i g(rey ratio) b(oolean/charpath) s(tring -> just 1 char)
	10 dict begin
	[ /s /b /g /i /j ] { exch def } forall
    gsave
    g setgray
    Chess.dx 3.5 div Chess.dx 5 div translate 
    j i PlaceAt
	/insidesize Chess.dx 0.7  mul def  % size of the letters inside the squares
    /Helvetica-Bold findfont insidesize scalefont setfont
    .5 setlinewidth
    b {
        s true charpath gsave 1 setgray fill grestore stroke
      } {
        s show
    } ifelse
    grestore
	end
} bind def
/MarkerSm { % j i g(rey ratio) b(oolean/charpath) s(tring -> just 2 chars)
	10 dict begin
	[ /s /b /g /i /j ] { exch def } forall
    % /s exch def /b exch def /g exch def /i exch def /j exch def
    gsave
    g setgray
    Chess.dx 3.5 div Chess.dx 6 div translate 
    j i PlaceAt
    /basefont /Helvetica-Bold findfont def
	/insidesize  Chess.dx 0.7  mul def  % size of the letters inside the squares
    basefont [insidesize 2 div 0 0 insidesize 0 0] makefont setfont
    .5 setlinewidth
    b {
        s true charpath gsave 1 setgray fill grestore stroke
      } {
        s show
    } ifelse
    grestore
	end
} bind def
%--------------------------------------------------------------------------
/fen2board { % useage:  fenstr flip fen2board
	10 dict begin
	/flip exch def   /fenstr exch def
	% /char2num << (p) -1 (n) -2 (b) -3 (r) -4 (q) -5 (k) -6
	%              (P)  1 (N)  2 (B)  3 (R)  4 (Q)  5 (K)  6  (1) 0 >> def
	/char2num << 112 -1 110 -2  98 -3 114 -4 113 -5 107 -6
	              80  1  78  2  66  3  82  4  81  5  75  6  49 0 >> def
	/a 64 array def
	/i 0 def
	/istr 0 def
	/active ( ) def
	fenstr {
		/c exch def
		c 32 eq {  exit } if
		c 47 eq {  % skip /
		} {
			c 50 ge c 56 le and {  % its 2..8
				/n c 48 sub def {
					a i 0 put
					/i i 1 add def
					/n n 1 sub def
					n 1 lt { exit } if 
				} loop
			} {  % else its a character in the dict char2num
				a i  char2num c get  put
				/i i 1 add def
			} ifelse
		} ifelse
		/istr istr 1 add def
	} forall
	a flip Board
	fenstr length  istr 1 add  gt {
		/active fenstr istr 1 add get def
		active 98 eq {
			flip { 1 } { 8 } ifelse  9.1 (B) Label
		} {
			flip { 8 } { 1 } ifelse  9.1 (W) Label
		} ifelse
	} if
	end
} bind def
%%EndProlog
]])

table.insert(PS_sections, '('..Fenstr..') false fen2board\n')
table.insert(PS_sections, '%%EOF\n')

if Device == 'eps' then
	local F = assert(io.open(Output, 'w'))
	F:write(table.concat(PS_sections, ''))
	F:close()
	os.exit(0)
end

-- from /home/pbin/eps2png
--if (!open(P,"|$gs -sDEVICE=$dev -sOutputFile=$tmp -q -g${x}x${y} -r$res -")){
--    die "sorry, can't run $gs: $!\n";
--}
-- where dev is either jpeg or png16m or (if transparent) pgnalpha
local gs_cmd = 'gs -sDEVICE='..Device..' -sOutputFile='..Output..
  ' -q -g'..tostring(Width)..'x'..tostring(Height)..' -r72 -'
print(gs_cmd)
local GS = assert(io.popen(gs_cmd, 'w'))
GS:write(table.concat(PS_sections, ''))
GS:close()

--[=[

=pod

=head1 NAME

fen2img - Creates a .png or .jpg diagram of a chess position in FEN

=head1 SYNOPSIS

 fen2img -w 500 \
   'rnb1k1nr/pppp1ppp/8/4p3/3b3q/4PPP1/PPP2K1P/RNBQ1BNR b KQkq - 0 5' \
   /tmp/hammerschlag.png
 display /tmp/hammerschlag.png

 FEN=`pgn2fen '1.f3 e5 2. Kf2 Bc5+ 3.d4 Qh4+ 4. g3 Bxd4 5.e3'`
 fen2img -w 500 "$FEN" /tmp/t.jpg
 fen2img -w 500 "$FEN" /tmp/t.png
 fen2img -w 500 "$FEN" /tmp/t.eps

=head1 DESCRIPTION

This script

=head1 ARGUMENTS

=over 3

=item I<-v>

Print the Version

=back

=head1 DOWNLOAD

I<fen2img> at is available in

  git clone https://github.com/peterbillam/postscriptlib

or at

  https://github.com/peterbillam/postscriptlib
  https://github.com/peterbillam/postscriptlib/tree/master/bin

It also needs I<gs> to be installed, if it isn't already:

  apt-get install ghostscript

or see:   http://www.ghostscript.com/

It also needs a particular TrueType font:

   http://homepages.di.fc.ul.pt/~jpn/gv/tabs/chessfont.zip

which unzips to C<CHEQ_TT.TTF>
which you move into C</usr/share/fonts/truetype/>

=head1 AUTHOR

Peter J Billam, http://www.pjb.com.au/comp/contact.html

=head1 SEE ALSO

 http://www.pjb.com.au/

=cut

]=]
