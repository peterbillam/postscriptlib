
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%        This Postscript is Copyright (c) 2017, Peter J Billam          %
% Permission is granted  to any individual or institution to use, copy, %
% modify or redistribute this software, so long as it is not resold for %
% profit, and provided this notice is retained. It is provided "as is", %
% without any express or implied warranty.    http://www.pjb.com.au     %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

/gauss_rand_r 0.5 1024.0 div 1024.0 div 1024.0 div def  % rand scaling factor
usertime realtime add srand

% The algorithm by  Richard P. Brent (1973), Computer Centre, ANU, Canberra
% Published (1981) as CACM Algorithm 448
% http://wwwmaths.anu.edu.au/~brent/pd/rpb023i.pdf
% was replaced in 20170510, fixing some obscure bugs ...

% http://www.design.caltech.edu/erik/Misc/Gaussian.html
% The polar form of the Box-Muller transformation is faster and more robust:
%   float x1, x2, w, y1, y2;
%   do {
%      x1 = 2.0 * ranf() - 1.0;
%      x2 = 2.0 * ranf() - 1.0;
%      w = x1 * x1 + x2 * x2;
%   } while ( w >= 1.0 );
%   w = sqrt( (-2.0 * log( w ) ) / w );
%   y1 = x1 * w;
%   y2 = x2 * w;
% where ranf() obtains a random number uniformly distributed in [0,1]
/gauss_rand_already false def
/gauss_rand {
  gauss_rand_already {
    /gauss_rand_already false def
    gauss_rand_y2 %  alternate between this and gauss_rand_y1  
  } {
    {
      /gauss_rand_x1 rand gauss_rand_r mul  2.0 mul 1.0 sub def
      /gauss_rand_x2 rand gauss_rand_r mul  2.0 mul 1.0 sub def
      /gauss_rand_w
        gauss_rand_x1 gauss_rand_x1 mul gauss_rand_x2 gauss_rand_x2 mul add def
      gauss_rand_w 1.0 le {exit} if
    } loop
    /gauss_rand_w  gauss_rand_w ln -2.0 mul  gauss_rand_w div  sqrt def
    /gauss_rand_y1 gauss_rand_x1 gauss_rand_w mul def
    /gauss_rand_y2 gauss_rand_x2 gauss_rand_w mul def
    /gauss_rand_already true def
    gauss_rand_y1
  } ifelse
} def

gauss_rand pop  % initialise, and discard the resulting zero

/grand {  % usage:  mean stddev grand
  gauss_rand mul add
} bind def

/irand {   % usage: n irand   ->  a random integer 0 .. n-1
  rand exch round cvi mod
} bind def

/randomget {   % usage:  [ an array ] randomget
  dup length  rand  exch mod  get
} bind def
