%!
/TimesSmallCaps <<   % see ASCIISmallCaps, comp.lang.postscript
    /FontType 0   % composite font, PLRM p286
    /FontMatrix [ 1 0 0 1 0 0 ]
    /FMapType 6
    /SubsVector <00 61 1a>
    /Encoding [ 0 1 2 ]
    /FDepVector [
        /Times-Roman findfont
        /Times-SC /Times-Roman findfont dup length dict copy
          dup /FontName /Times-SC put
          dup /Encoding [ 65 1 90 {
                              1 string dup 0  4 -1 roll put  cvn
                          } for
                        ] put
          definefont 0.8 scalefont
        /Times-end /Times-Roman findfont dup length dict copy
          dup /FontName /Times-end put
          dup /Encoding [ /bracketleft /bar /bracketright
                          /tilde /.notdef ] put
          definefont
    ]
>> definefont pop

/TimesItalicSmallCaps <<   % see ASCIISmallCaps, comp.lang.postscript
    /FontType 0   % composite font, PLRM p286
    /FontMatrix [ 1 0 0 1 0 0 ]
    /FMapType 6
    /SubsVector <00 61 1a>
    /Encoding [ 0 1 2 ]
    /FDepVector [
        /Times-Italic findfont
        /Times-ItalicSC /Times-Italic findfont dup length dict copy
          dup /FontName /Times-ItalicSC put
          dup /Encoding [ 65 1 90 {
                              1 string dup 0  4 -1 roll put  cvn
                          } for
                        ] put
          definefont 0.8 scalefont
        /TimesItalic-end /Times-Italic findfont dup length dict copy
          dup /FontName /TimesItalic-end put
          dup /Encoding [ /bracketleft /bar /bracketright
                          /tilde /.notdef ] put
          definefont
    ]
>> definefont pop

/TimesBoldSmallCaps <<   % see ASCIISmallCaps, comp.lang.postscript
    /FontType 0   % composite font, PLRM p286
    /FontMatrix [ 1 0 0 1 0 0 ]
    /FMapType 6
    /SubsVector <00 61 1a>
    /Encoding [ 0 1 2 ]
    /FDepVector [
        /Times-Bold findfont
        /Times-BoldSC /Times-Bold findfont dup length dict copy
          dup /FontName /Times-BoldSC put
          dup /Encoding [ 65 1 90 {
                              1 string dup 0  4 -1 roll put  cvn
                          } for
                        ] put
          definefont 0.8 scalefont
        /TimesBold-end /Times-Bold findfont dup length dict copy
          dup /FontName /TimesBold-end put
          dup /Encoding [ /bracketleft /bar /bracketright
                          /tilde /.notdef ] put
          definefont
    ]
>> definefont pop

/TimesBoldItalicSmallCaps <<   % see ASCIISmallCaps, comp.lang.postscript
    /FontType 0   % composite font, PLRM p286
    /FontMatrix [ 1 0 0 1 0 0 ]
    /FMapType 6
    /SubsVector <00 61 1a>
    /Encoding [ 0 1 2 ]
    /FDepVector [
        /Times-BoldItalic findfont
        /Times-BoldItalicSC /Times-BoldItalic findfont dup length dict copy
          dup /FontName /Times-BoldItalicSC put
          dup /Encoding [ 65 1 90 {
                              1 string dup 0  4 -1 roll put  cvn
                          } for
                        ] put
          definefont 0.8 scalefont
        /TimesBoldItalic-end /Times-BoldItalic findfont dup length dict copy
          dup /FontName /TimesBoldItalic-end put
          dup /Encoding [ /bracketleft /bar /bracketright
                          /tilde /.notdef ] put
          definefont
    ]
>> definefont pop

/HelveticaSmallCaps <<   % directly from TimesSmallCaps
  /FontType 0   % composite font, PLRM p286
  /FontMatrix [ 1 0 0 1 0 0 ]
  /FMapType 6
  /SubsVector <00 61 1a>
  /Encoding [ 0 1 2 ]
  /FDepVector [
    /Helvetica findfont
    /Helvetica-SC /Helvetica findfont dup length dict copy
      dup /FontName /Helvetica-SC put
      dup /Encoding [ 65 1 90 { 1 string dup 0  4 -1 roll put  cvn } for ] put
      definefont 0.8 scalefont
    /Helvetica-end /Helvetica findfont dup length dict copy
      dup /FontName /Helvetica-end put
      dup /Encoding [ /bracketleft /bar /bracketright /tilde /.notdef ] put
      definefont
  ]
>> definefont pop

/HelveticaItalicSmallCaps <<
  /FontType 0   % composite font, PLRM p286
  /FontMatrix [ 1 0 0 1 0 0 ]
  /FMapType 6
  /SubsVector <00 61 1a>
  /Encoding [ 0 1 2 ]
  /FDepVector [
    /Helvetica-Oblique findfont
    /Helvetica-Italic-SC /Helvetica-Oblique findfont dup length dict copy
      dup /FontName /Helvetica-Italic-SC put
      dup /Encoding [ 65 1 90 { 1 string dup 0  4 -1 roll put  cvn } for ] put
      definefont 0.8 scalefont
    /Helvetica-Italic-end /Helvetica-Oblique findfont dup length dict copy
      dup /FontName /Helvetica-Italic-end put
      dup /Encoding [ /bracketleft /bar /bracketright /tilde /.notdef ] put
      definefont
  ]
>> definefont pop

/HelveticaBoldSmallCaps <<
  /FontType 0   % composite font, PLRM p286
  /FontMatrix [ 1 0 0 1 0 0 ]
  /FMapType 6
  /SubsVector <00 61 1a>
  /Encoding [ 0 1 2 ]
  /FDepVector [
    /Helvetica-Bold findfont
    /Helvetica-Bold-SC /Helvetica-Bold findfont dup length dict copy
      dup /FontName /Helvetica-Bold-SC put
      dup /Encoding [ 65 1 90 { 1 string dup 0  4 -1 roll put  cvn } for ] put
      definefont 0.8 scalefont
    /Helvetica-Bold-end /Helvetica-Bold findfont dup length dict copy
      dup /FontName /Helvetica-Bold-end put
      dup /Encoding [ /bracketleft /bar /bracketright /tilde /.notdef ] put
      definefont
  ]
>> definefont pop

/HelveticaBoldItalicSmallCaps <<
  /FontType 0   % composite font, PLRM p286
  /FontMatrix [ 1 0 0 1 0 0 ]
  /FMapType 6
  /SubsVector <00 61 1a>
  /Encoding [ 0 1 2 ]
  /FDepVector [
    /Helvetica-BoldOblique findfont
    /Helvetica-BoldItalic-SC /Helvetica-BoldOblique findfont dup length dict copy
      dup /FontName /Helvetica-BoldItalic-SC put
      dup /Encoding [ 65 1 90 { 1 string dup 0  4 -1 roll put  cvn } for ] put
      definefont 0.8 scalefont
    /Helvetica-BoldItalic-end /Helvetica-BoldOblique findfont dup length dict copy
      dup /FontName /Helvetica-BoldItalic-end put
      dup /Encoding [ /bracketleft /bar /bracketright /tilde /.notdef ] put
      definefont
  ]
>> definefont pop

% From: a bitmap font:
% https://github.com/luser-dr00g/xpost/blob/master/data/bitfont.ps
/Bitfont5x7 <<
  /FontType 3
  /FontMatrix [.01 0 0 -.01 0 .01]
  /FontBBox [ 0 0 50 70]
  /Encoding 128 array
  % /BitsPerComponent 1   % PJB: in aid of imagemask p.220
  % /Decode [0 1]         % PJB: in aid of imagemask p.231
  /_ (\377)
  /# (\0)
  /charprocs <<
   /.notdef {<F8 D8 D8 A8 A8 D8 F8>}   % in aid of imagemask  p.216
%   upside-down, but this gets corrected by the above FontMatrix...
%   /.notdef (FEF75AEFE) /ASCIIHexDecode filter   PJB: in aid of imagemask
%    /.notdef {
%     # # # # #
%     # # _ # #
%     # # _ # #
%     # _ # _ #
%     # _ # _ #
%     # # _ # #
%     # # # # #
%    }
    32 {<00 00 00 00 00 00 00>}   % PJB: in aid of imagemask
%    32 {
%     _ _ _ _ _
%     _ _ _ _ _
%     _ _ _ _ _
%     _ _ _ _ _
%     _ _ _ _ _
%     _ _ _ _ _
%     _ _ _ _ _
%    }
    48 {<70 88 98 A8 C8 70 00>}
%    48 {
%     _ # # # _
%     # _ _ _ #
%     # _ _ # #
%     # _ # _ #
%     # # _ _ #
%     _ # # # _
%     _ _ _ _ _
%    }
    49 {<20 60 20 20 20 70 00>}
%    49 {
%     _ _ # _ _
%     _ # # _ _
%     _ _ # _ _
%     _ _ # _ _
%     _ _ # _ _
%     _ # # # _
%     _ _ _ _ _
%    }
    50 {<60 90 10 20 40 F0 00>}
%    50 {
%     _ # # _ _
%     # _ _ # _
%     _ _ _ # _
%     _ _ # _ _
%     _ # _ _ _
%     # # # # _
%     _ _ _ _ _
%    }
    51 {<60 90 20 10 90 60 00>}
%    51 {
%     _ # # _ _
%     # _ _ # _
%     _ _ # _ _
%     _ _ _ # _
%     # _ _ # _
%     _ # # _ _
%     _ _ _ _ _
%    }
    52 {<20 60 A0 F0 20 20 00>}
%    52 {
%     _ _ # _ _
%     _ # # _ _
%     # _ # _ _
%     # # # # _
%     _ _ # _ _
%     _ _ # _ _
%     _ _ _ _ _
%    }
    53 {<F0 80 E0 10 90 60 00>}
%    53 {
%     # # # # _
%     # _ _ _ _
%     # # # _ _
%     _ _ _ # _
%     # _ _ # _
%     _ # # _ _
%     _ _ _ _ _
%    }
    54 {<60 80 E0 90 90 60 00>}
%    54 {
%     _ # # _ _
%     # _ _ _ _
%     # # # _ _
%     # _ _ # _
%     # _ _ # _
%     _ # # _ _
%     _ _ _ _ _
%    }
    55 {<F0 10 10 20 40 40 00>}
%    55 {
%     # # # # _
%     _ _ _ # _
%     _ _ _ # _
%     _ _ # _ _
%     _ # _ _ _
%     _ # _ _ _
%     _ _ _ _ _
%    }
    56 {<60 90 60 90 90 60 00>}
%    56 {
%     _ # # _ _
%     # _ _ # _
%     _ # # _ _
%     # _ _ # _
%     # _ _ # _
%     _ # # _ _
%     _ _ _ _ _
%    }
    57 {<60 90 90 70 10 60 00>}
%    57 {
%     _ # # _ _
%     # _ _ # _
%     # _ _ # _
%     _ # # # _
%     _ _ _ # _
%     _ # # _ _
%     _ _ _ _ _
%    }
  >>
  /BuildChar {
    %100 0 0 0 50 70 setcachedevice
    80 0 setcharwidth
    exch begin
      charprocs exch
      2 copy known not {pop /.notdef} if
      get exec
      % 5 7 8 [-.1 0 0 -.1 .1 .1] {} image
      5 7 true [.1 0 0 .1 .1 .1]  5 -1 roll  imagemask  % PJB p.435, 223
    end
  }
>> definefont
pop
% pstack  prints out 76 numbers; 101 99 99 110 110 101 101 105 105 etc...
%  pop
%  100 100 moveto
%  /Bitfont5x7 40 selectfont
%  pstack()=
%  %break
%  (0123456789?)
%  show
%  showpage

% see also ~/log/ps at 20160523
%9 dict begin   % ExampleFont from PLRM p282
%/FontType 3 def   % PLRM p278
%/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
%/FontBBox [ 0 0 1000 1000 ] def
%/Encoding 256 array def   % trivial encoding vector
%0 1 255 { Encoding exch /.notdef put } for
%Encoding 97 /square   put   % ASCII a = 97
%Encoding 98 /triangle put   % ASCII b = 99
%/CharProcs 3 dict def   % subsidiary dictionary
%CharProcs begin   % individual character definitions
%  /.notdef { } def
%  /square { 0 0 moveto 750 0 lineto 750 750 lineto 0 750 lineto
%    closepath fill } bind def
%  /triangle { 0 0 moveto 750 0 lineto 375 750 lineto closepath fill } bind def
%end
%/BuildGlyph {   % the stack contains the font charname
%  1000 0        % width
%  0 0 750 750   % bounding box
%  setcachedevice
%  exch /CharProcs get exch   % get CharProcs dictionary
%  2 copy known not { pop /.notdef } if   % see if charname is known
%  get exec      % execute character procedure
%} bind def
%/BuildChar {    % Level 1 compatibility
%  1 index /Encoding get exch get
%  1 index /BuildGlyph get exec
%} bind def
%currentdict
%end
%/ExampleFont exch definefont pop

% see also ~/log/ps at 20160523
9 dict begin
/FontType 3 def   % PLRM p278
% /PaintType 0 def  % p278 says this only works for FontType 0 :-(
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
% /FontMatrix [ 0.001 0 0.0007 0.001 0 0 ] def   % Italic, see: PLRM p154
% how to parameterise Italicity ? wrap this as a font-generator-function ?
% or just set   currentfont /FontMatrix [ 0.001 0 0.0007 0.001 0 0 ] put
/FontBBox [ 0 0 1000 1000 ] def
/Encoding 256 array def   % trivial encoding vector
0 1 255 { Encoding exch /.notdef put } for
Encoding   9 /TAB    put
Encoding  32 /SPACE  put
Encoding  33 /EXCLAM put
Encoding  40 /BRAK_L put
Encoding  41 /BRAK_R put
Encoding  43 /PLUS   put
Encoding  45 /MINUS  put
Encoding  46 /DOT    put
Encoding  48 /char_0 put
Encoding  49 /char_1 put
Encoding  50 /char_2 put
Encoding  51 /char_3 put
Encoding  52 /char_4 put
Encoding  53 /char_5 put
Encoding  54 /char_6 put
Encoding  55 /char_7 put
Encoding  56 /char_8 put
Encoding  57 /char_9 put
Encoding  58 /COLON  put
Encoding  61 /EQUALS put
Encoding  63 /QUESTN put
Encoding  65 /char_A put
Encoding  66 /char_B put
Encoding  67 /char_C put
Encoding  68 /char_D put
Encoding  69 /char_E put
Encoding  70 /char_F put
Encoding  71 /char_G put
Encoding  72 /char_H put
Encoding  73 /char_I put
Encoding  74 /char_J put
Encoding  75 /char_K put
Encoding  76 /char_L put
Encoding  77 /char_M put
Encoding  78 /char_N put
Encoding  79 /char_O put
Encoding  80 /char_P put
Encoding  81 /char_Q put
Encoding  82 /char_R put
Encoding  83 /char_S put
Encoding  84 /char_T put
Encoding  85 /char_U put
Encoding  86 /char_V put
Encoding  87 /char_W put
Encoding  88 /char_X put
Encoding  89 /char_Y put
Encoding  90 /char_Z put
Encoding  97 /char_A put
Encoding  98 /char_B put
Encoding  99 /char_C put
Encoding 100 /char_D put
Encoding 101 /char_E put
Encoding 102 /char_F put
Encoding 103 /char_G put
Encoding 104 /char_H put
Encoding 105 /char_I put
Encoding 106 /char_J put
Encoding 107 /char_K put
Encoding 108 /char_L put
Encoding 109 /char_M put
Encoding 110 /char_N put
Encoding 111 /char_O put
Encoding 112 /char_P put
Encoding 113 /char_Q put
Encoding 114 /char_R put
Encoding 115 /char_S put
Encoding 116 /char_T put
Encoding 117 /char_U put
Encoding 118 /char_V put
Encoding 119 /char_W put
Encoding 120 /char_X put
Encoding 121 /char_Y put
Encoding 122 /char_Z put
Encoding 124 /BAR    put
% Encoding 220 /Uuml   put
/Metrics 30 dict def
Metrics begin
  /.notdef 600 def
  /TAB     800 def
  /SPACE   400 def
  /EXCLAM  300 def
  /BRAK_L  450 def
  /BRAK_R  450 def
  /PLUS    450 def
  /MINUS   450 def
  /DOT     165 def
  /char_0  550 def
  /char_1  360 def
  /char_2  500 def
  /char_3  500 def
  /char_4  500 def
  /char_5  500 def
  /char_6  500 def
  /char_7  490 def
  /char_8  500 def
  /char_9  500 def
  /COLON   200 def
  /EQUALS  450 def
  /QUESTN  450 def
  /char_A  800 def
  /char_B  650 def
  /char_C  600 def
  /char_D  550 def
  /char_E  725 def
  /char_F  700 def
  /char_G  800 def
  /char_H  850 def
  /char_I  350 def
  /char_J  600 def
  /char_K  800 def
  /char_L  700 def
  /char_M  900 def
  /char_N  800 def
  /char_O  800 def
  /char_P  650 def
  /char_Q  800 def
  /char_R  750 def
  /char_S  700 def
  /char_T  800 def
  /char_U  850 def
  /char_V  800 def
  /char_W  850 def
  /char_X  800 def
  /char_Y  800 def
  /char_Z  700 def
  /BAR     350 def
end
/BBox 30 dict def BBox begin
  /.notdef [ 0 0 600 600 ] def
  /TAB     [ 0 0 800 750 ] def
  /SPACE   [ 0 0 400 750 ] def
  /EXCLAM  [ 0 0 250 750 ] def
  /BRAK_L  [ 0 0 400 750 ] def
  /BRAK_R  [ 0 0 400 750 ] def
  /PLUS    [ 0 0 400 750 ] def
  /MINUS   [ 0 0 400 750 ] def
  /DOT     [ 0 0 130 125 ] def
  /char_0  [ 0 0 450 750 ] def
  /char_1  [ 0 0 275 750 ] def
  /char_2  [ 0 0 450 750 ] def
  /char_3  [ 0 0 450 750 ] def
  /char_4  [ 0 0 450 750 ] def
  /char_5  [ 0 0 450 750 ] def
  /char_6  [ 0 0 450 750 ] def
  /char_7  [ 0 0 450 750 ] def
  /char_8  [ 0 0 450 750 ] def
  /char_9  [ 0 0 460 750 ] def
  /COLON   [ 0 0 180 450 ] def
  /EQUALS  [ 0 0 400 750 ] def
  /QUESTN  [ 0 0 400 750 ] def
  /char_A  [ 0 0 750 750 ] def
  /char_B  [ 0 0 600 750 ] def
  /char_C  [ 0 0 500 750 ] def
  /char_D  [ 0 0 500 750 ] def
  /char_E  [ 0 0 650 750 ] def
  /char_F  [ 0 0 600 750 ] def
  /char_G  [ 0 0 700 750 ] def
  /char_H  [ 0 0 750 750 ] def
  /char_I  [ 0 0 250 750 ] def
  /char_J  [ 0 0 500 750 ] def
  /char_K  [ 0 0 750 750 ] def
  /char_L  [ 0 0 600 750 ] def
  /char_M  [ 0 0 800 750 ] def
  /char_N  [ 0 0 700 750 ] def
  /char_O  [ 0 0 750 750 ] def
  /char_P  [ 0 0 600 750 ] def
  /char_R  [ 0 0 700 750 ] def
  /char_S  [ 0 0 700 750 ] def
  /char_Q  [ 0 0 750 750 ] def
  /char_T  [ 0 0 750 750 ] def
  /char_U  [ 0 0 750 750 ] def
  /char_V  [ 0 0 750 750 ] def
  /char_W  [ 0 0 800 750 ] def
  /char_X  [ 0 0 750 750 ] def
  /char_Y  [ 0 0 750 750 ] def
  /char_Z  [ 0 0 650 750 ] def
  /BAR     [ 0 0 300 750 ] def
end
/CharProcs 30 dict def   % subsidiary dictionary
CharProcs begin   % individual character definitions
  /.notdef { 300 300 250 0 360 arc fill } def
  /TAB    { } bind def
  /SPACE  { } bind def
  /EXCLAM { 125 80 80 0 360 arc 85 240 moveto 125 240 40 180 360 arc
    225 400 225 450 225 750 curveto 25 750 lineto
    25  450 25  400  85 240 curveto
    closepath fill } bind def
  /BRAK_L { 300 0 moveto 400 0 lineto 250 75 150 250 150 375 curveto
    150 475 200 675 400 750 curveto 300 750 lineto
    100 675 0 475 0 375 curveto 0 250 100 75 300 0 curveto
    closepath fill } bind def
  /BRAK_R { 100 0 moveto 0 0 lineto 150 75 250 250 250 375 curveto
    250 475 200 675 0 750 curveto 100 750 lineto
    300 675 400 475 400 375 curveto 400 250 300 75 100 0 curveto
    closepath fill } bind def
  /PLUS  { 0 330 400 90 rectfill 155 175 90 400 rectfill } bind def
  /MINUS { 0 330 400 90 rectfill } bind def
  /DOT    { 65 60 60 0 360 arc fill } def
  /char_0 { 0 375 moveto 0 0 0 0 225 0 curveto 450 0 450 0 450 375 curveto
    450 750 450 750 225 750 curveto  0 750 0 750 0 375 curveto closepath
    150 375 moveto 150 600 150 600 225 600 curveto
    300 600 300 600 300 375 curveto
    300 150 300 150 225 150 curveto 150 150 150 150 150 375 curveto
    closepath fill } bind def
  /char_1 { 0 500 moveto 100 500 lineto 100 0 lineto 275 0 lineto
    275 750 lineto 140 750 lineto closepath fill } bind def
  /char_2 { 0 0 moveto 450 0 lineto 450 150 lineto 200 150 lineto
    450 400 450 450 450 525 curveto 225 525 225 0 90 arc 0 750 lineto
    0 600 lineto 225 600 lineto 225 525 75 90 0 arcn
    300 450 300 450 0 150 curveto closepath fill } bind def
  /char_3 { 0 0 moveto 225 0 lineto 
    225 225 225 -90 90 arc 250 450 lineto 450 650 lineto 450 750 lineto
    0 750 lineto 0 600 lineto 225 600 lineto 0 375 lineto 0 300 lineto
    225 300 lineto 225 225 75 90 -90 arcn 0 150 lineto
	closepath fill } bind def
  /char_4 { 260 0 moveto 400 0 lineto 400 150 lineto 450 150 lineto
    450 300 lineto 400 300 lineto 400 750 lineto 260 750 lineto
    0 150 lineto 260 150 lineto closepath
    260 300 moveto 180 300 lineto 260 450 lineto
    closepath fill } bind def
  /char_5 { 0 0 moveto 212.5 0 lineto 
    212.5 237.5 237.5 -90 90 arc 150 475 lineto 150 600 lineto 450 600 lineto
    450 750 lineto 0 750 lineto 0 350 lineto 212.5 350 lineto
    212.5 250 100 90 -90 arcn 0 150 lineto
	closepath fill } bind def
  /char_6 { 225 225 225 0 360 arc 225 225 85 360 0 arcn closepath
    0 225 moveto 140 225 lineto 140 400 140 450 450 750 curveto
    250 750 lineto 0 460 0 410 0 225 curveto closepath fill } bind def
  /char_7 { 0 0 moveto 200 0 lineto 450 750 lineto 0 750 lineto
    0 550 lineto 200 550 lineto
    closepath fill } bind def
  /char_8 { 225 225 225 0 360 arc 225 225 85 360 0 arcn
    375 525 moveto 225 525 225 0 360 arc 225 525 85 360 0 arcn
	closepath fill } bind def
  /char_9 { 225 525 225 0 360 arc 225 525 85 360 0 arcn closepath
    450 525 moveto 310 525 lineto 310 350 310 300 0 0 curveto
    200 0 lineto 450 290 450 340 450 525 curveto closepath fill } bind def
  /COLON  { 100 110 65 0 360 arc 160 350 moveto 100 350 65 0 360 arc fill } def
  /EQUALS { 0 240 400 90 rectfill 0 420 400 90 rectfill } bind def
  /QUESTN { 160 75 75 0 360 arc fill  150 setlinewidth
    160 180 moveto 160 382 lineto 300 382 325 485 325 530 curveto
    325 640 260 675 160 675 curveto 0 675 lineto stroke } bind def
  /char_A { 0 0 moveto 250 0 lineto 300  90 lineto 450  90 lineto 500 0 lineto
    750 0 lineto 375 750 lineto closepath fill } bind def
  /char_B { 0 0 moveto 250 0 lineto
    720   0  720 375  275 375 curveto
    720 375  720 750  250 750 curveto
    0 750 lineto closepath fill } bind def
  /char_C { 375 750 moveto  375 375 375 90 270 arc 500 0 lineto 500 250 lineto
    375 250 lineto 375 375 125 -90 90 arcn 500 500 lineto 500 750 lineto
    closepath fill } bind def
  /char_D { 0 0 moveto 125 0 lineto 125 375 375 -90 90 arc 0 750 lineto
    closepath fill } bind def
  /char_E { 0 0 moveto 600 0 lineto 600 240 lineto 250 225 lineto
    250 300 lineto 500 300 lineto 500 450 lineto 250 450 lineto
    250 525 lineto 600 510 lineto 600 750 lineto 0 750 lineto
    % closepath 250 375 moveto 550 250 lineto 550 500 lineto  NOT BAD
    closepath fill } bind def
  /char_F { 0 0 moveto 250 0 lineto
    % 250 500 lineto 600 500 lineto 600 750 lineto 0 750 lineto closepath
	% 250 375 moveto 550 250 lineto 550 500 lineto    % NOT BAD. a bit flashy
    250 200 lineto 550 200 lineto 550 400 lineto  250 400 lineto 250 500 lineto
    600 500 lineto 600 750 lineto 0 750 lineto
    closepath fill } bind def
  /char_G { 375 750 moveto  375 375 375 90 270 arc 700 0 lineto 700 420 lineto
    450 420 lineto 450 250 lineto
    375 250 lineto 375 375 125 -90 90 arcn 700 500 lineto 700 750 lineto
    closepath fill } bind def
  /char_H { 0 0 moveto 250 0 lineto 250 250 lineto 500 250 lineto 500 0 lineto
    750 0 lineto 750 750 lineto 500 750 lineto 500 500 lineto 250 500 lineto
    250 750 lineto 0 750 lineto closepath fill } bind def
  /char_I { 0 0 moveto 250 0 lineto 250 750 lineto 0 750 lineto
    closepath fill } bind def
  /char_J { 0 0 moveto 125 0 lineto 125 375 375 -90 0 arc 500 750 lineto
    250 750 lineto 250 750 lineto 125 375 125 0 -90 arcn 0 250 lineto
    closepath fill } bind def
  /char_K { 0 0 moveto 250 0 lineto 250 300 lineto 500 0 lineto 750 0 lineto
    450 375 lineto 750 750 lineto 500 750 lineto 250 450 lineto 250 750 lineto
     0 750 lineto closepath fill } bind def
  /char_L { 0 0 moveto 600 0 lineto 600 250 lineto 250 250 lineto
    250 750 lineto 0 750 lineto closepath fill } bind def
  /char_M { 0 0 moveto 250 0 lineto 250 350 lineto 400 0 lineto 550 350 lineto
    550 0 lineto 800 0 lineto 800 750 lineto 600 750 lineto 400 400 lineto
    200 750 lineto 0 750 lineto closepath fill } bind def
  /char_N { 0 0 moveto 250 0 lineto 250 350 lineto 700 0 lineto
    700 750 lineto 450 750 lineto 450 400 lineto 0 750 lineto
    closepath fill } bind def
  /char_O { 375 375 375 0 360 arc 375 375 125 0 360 arc eofill } bind def
  /char_P { 0 0 moveto 250 0 lineto 250 350 lineto
    720 350  720 750  250 750 curveto
    0 750 lineto closepath fill } bind def
  /char_R { 0 0 moveto 250 0 lineto 250 200 lineto 450 0 lineto
    700 0 lineto 400 350 lineto  800 350  800 750  400 750 curveto
    0 750 lineto closepath fill } bind def
  /char_S { 0 0 moveto 400 0 lineto
   400 237.5 237.5 -90 90 arc 250 475 lineto
   250 512.5 37.5 270 90 arcn 650 550 lineto 650 750 lineto 300 750 lineto
   250 512.5 237.5 90 270 arc 400 275 lineto 
   400 237.5 37.5 90 -90 arcn 0 200 lineto
   closepath fill } bind def
  /char_Q { 375 375 375 0 360 arc 375 375 125 0 360 arc eofill
    425 200 moveto 625 0 lineto 750 0 lineto 750 125 lineto 525 325 lineto
    closepath fill } bind def
  /char_T { 250 0 moveto 500 0 lineto 500 500 lineto 750 500 lineto
    750 750 lineto 0 750 lineto 0 500 lineto 250 500 lineto
    closepath fill } bind def
  /char_U { 0 750 moveto 0 375 lineto 375 375 375 180 360 arc 750 750 lineto
    500 750 lineto 500 375 lineto 375 375 125 360 180 arcn 250 750 lineto
    closepath fill } bind def
  /char_V { 250 0 moveto 500 0 lineto 750 750 lineto 500 750 lineto
    375 350 lineto 250 750 lineto 0 750 lineto closepath fill } bind def
  /char_W { 0 750 moveto 225 750 lineto 250 400 lineto 400 750 lineto
    550 400 lineto 575 750 lineto 800 750 lineto 700 0 lineto 500 0 lineto
    400 350 lineto 300 0 lineto 100 0 lineto closepath fill } bind def
  /char_X { 0 0 moveto 250 0 lineto 750 750 lineto 500 750 lineto closepath
    250 750 moveto 0 750 lineto 500 0 lineto 750 0 lineto closepath
    fill } bind def
  /char_Y { 250 0 moveto 500 0 lineto 500 300 lineto 750 750 lineto
    500 750 lineto 375 450 lineto 250 750 lineto 0 750 lineto 250 300 lineto
    closepath fill } bind def 
  /char_Z { 0 0 moveto 650 0 lineto 650 250 lineto 420 250 lineto
    650 750 lineto 0 750 lineto 0 500 lineto 230 500 lineto
    closepath fill } bind def 
  /BAR { 105 0 90 750 rectfill } bind def
end
/BuildGlyph {   % the stack contains : fontdict charname
  /charname exch def
  /fontdict exch def
  fontdict /Metrics get charname get 0          % width
  fontdict /BBox    get charname get aload pop  % bounding box
  setcachedevice
  fontdict /CharProcs get   % get CharProcs dictionary
  % dup charname known { charname (yup)=} { /.notdef (not)= } ifelse
  charname get exec      % execute character procedure
} bind def
/BuildChar {    % Level 1 compatibility
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
currentdict
end
/FatSimple exch definefont pop

/FatSimple findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /FontMatrix [ 0.001 0 0.0008 0.001 0 0 ] def
  currentdict
end
/FatSimpleItalic exch definefont pop

