#! /usr/bin/perl
#
#########################################################################
#        This Perl script is Copyright (c) 2013, Peter J Billam         #
#               c/o P J B Computing, www.pjb.com.au                     #
#     This script is free software; you can redistribute it and/or      #
#            modify it under the same terms as Perl itself.             #
#########################################################################
my $Version       = '1.0';
my $VersionDate   = '20may2017';

# Movies on film are almost exclusively projected at 24 fps.
# Television, however, does not have an internationally accepted frame rate.
# In Europe and many other countries, PAL and SECAM use 25 fps,
# whereas NTSC video in North America and Japan uses 29.97 fps.
# Other common frame rates are usually multiples of these.

# How much of the action should be in the Perl that generates the PostScript
# and how much should be in the PostScript itself ?

my $TmpDir        = "/tmp/tree_video.$$";
my $FrameNumber   = 0;      # used and incremented by next_filename()
my $Width         = '1600'; # or 1760
my $Height        = '900';  # or 1760
my $Fps           = 24.0;   # or  25         or 29.97 or  15
my $NFrames       = 600;    
my $PrePad        = 5;      # seconds
my $PostPad       = 5;      # seconds
my $Mencoder      = which('mencoder');
my $Avconv        = which('avconv');
my $Ffmpeg        = which('ffmpeg');

while ($ARGV[$[] =~ /^-([a-z])/) {
	if ($1 eq 'v')      { shift;
		my $n = $0; $n =~ s{^.*/([^/]+)$}{$1};
		print "$n version $Version $VersionDate\n";
		exit 0;
	} elsif ($1 eq 't') { shift; $TitleJpg   = shift;
	} elsif ($1 eq 'c') { shift; $CreditsJpg = shift;
	} else {
		print "usage:\n";  my $synopsis = 0;
		while (<DATA>) {
			if (/^=head1 SYNOPSIS/)     { $synopsis = 1; next; }
			if ($synopsis && /^=head1/) { last; }
			if ($synopsis && /\S/)      { s/^\s*/   /; print $_; next; }
		}
		exit 0;
	}
}

if (!$Mencoder and !$Ffmpeg and !$Avconv) {
	die(" Sorry, can't find avconv, ffmpeg nor mencoder in your \$PATH\n");
}

if (! mkdir $TmpDir) { die "can't mkdir $TmpDir: $!\n"; }
if (! chdir $TmpDir) { die "can't chdir $TmpDir: $!\n"; }
warn " TmpDir = $TmpDir\n";

title2jpg();
my $title_filename = next_filename();
rename 'pre.jpg', $title_filename;
my $num_title_frames = round($Fps*$PrePad - 3);
foreach (1..$num_title_frames) {
    my $new_filename = next_filename();
    if (! link $title_filename, $new_filename) {
        die "can't link $title_filename, $new_filename : $!\n";
    }
}

warn "Movie:\n";
for ($iframe=1; $iframe <= $NFrames; $iframe++) { frame2jpg($iframe); }
#warn "\nCredits:\n";
#for ($iframe=1; $iframe <= 250; $iframe++) { credits2jpg($iframe); }

if ($Avconv) {
	system "$Avconv -f image2 -r $Fps -i t_%06d.jpg "
	  . " -s ${Width}x$Height t.mp4";
} elsif ($Ffmpeg) {
	# "image2" is the image file demuxer,
	#   which reads from a list of image files specified by a pattern.
	system "$Ffmpeg -f image2 -r $Fps -i t_%06d.jpg "
	  . "-r $Fps -s ${Width}x$Height t.mp4";   # 1.7 worked first try :-)
} elsif ($Mencoder) {
	# mp3lame, faac and x264enc are not necessarily compiled in; pcm works.
	my $aspect = sprintf '%5g', $Width/$Height;
	system "$Mencoder -oac pcm -fps $Fps -ofps $Fps "
	  . "'mf://t_*.jpg' -mf h=$Height:w=$Width:fps=$Fps:type=jpeg "
	  .  "-o t.mp4 -ovc lavc -lavcopts vcodec=mpeg4:aspect=$aspect";
} else {
	die " BUG: shouldn't reach here...";
}

system "mplayer t.mp4";

warn "\n your video is: $TmpDir/t.mp4\n";

# clean up ?

exit;

sub which {
	my @PATH = split (":",$ENV{PATH});
	my $f; foreach $d (@PATH) {$f="$d/$_[$[]";  return $f if -x $f; }
}

sub eps2jpg {  my ($eps_text, $fn) = @_;
	if (!open(P,
	  "| gs -sDEVICE=jpeg -sOutputFile=$fn -q -g${Width}x$Height -r72 -" )) {
		die "sorry, can't run $gs: $!\n";
	}
	print P $eps_text; close P;
}

sub title2jpg {
	eps2jpg <<EOT , 'pre.jpg';
%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 0 0 $Width $Height
% http://www.pjb.com.au
%%BeginProlog
(/home/pjb/ps/lib/colours.ps) run
(/home/pjb/ps/lib/fonts.ps) run
/xmax $Width def
/ymax $Height def
/xmid xmax 0.5 mul def
/ymid ymax 0.5 mul def
/centreshow { % usage: x y font fontsize (string) centreshow
  3 dict begin
    [ /s /fontsize /font ] { exch def } forall
    gsave moveto font findfont fontsize scalefont setfont
    gsave s false charpath flattenpath pathbbox grestore
    exch 4 -1 roll pop pop s stringwidth pop -0.5 mul  % dx/2
    3 1 roll sub 0.5 mul % dy/2
    rmoveto s show grestore
  end
} bind def
%%EndProlog
%%Page: 1 1
%%BeginPageSetup
%%EndPageSetup
red setrgbcolor  0 0 xmax ymax rectfill
yellow setrgbcolor
xmid 0.96 mul ymax .62 mul /FatSimpleItalic xmax 7 div
  (Morphing Tree) centreshow
xmid ymax .35 mul /FatSimpleItalic xmax 42 div
  (generated by the script make_tree_video) centreshow
xmid ymax .20 mul /FatSimpleItalic xmax 37 div
  (written by  Peter Billam,  2017) centreshow
showpage
%%EOF
EOT
	close P;
	wait;
}

sub credits2jpg {  my $iframe = $_[$[];
	my $jpg_filename = next_filename();
	warn "\e[K iframe = $iframe   jpg_filename = $jpg_filename\e[A\n";
	my $glide = 1.0;   if ($iframe < 72) { $glide = $iframe/72; }
	my $fade  = 0.0;   if ($iframe >120) { $fade  = ($iframe-120)/120; }
	if ($fade > 1.0) { $fade = 1.0; }
	eps2jpg(<<EOT, $jpg_filename);
%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 0 0 $Width $Height
%%BeginProlog
(/home/pjb/ps/lib/colours.ps) run
(/home/pjb/ps/lib/fonts.ps) run
/xmax $Width def
/ymax $Height def
/xmid xmax 0.5 mul def
/ymid ymax 0.5 mul def
/centreshow { % usage: x y font fontsize (string) centreshow
  3 dict begin
    [ /s /fontsize /font ] { exch def } forall
    gsave moveto font findfont fontsize scalefont setfont
    gsave s false charpath flattenpath pathbbox grestore
    exch 4 -1 roll pop pop s stringwidth pop -0.5 mul  % dx/2
    3 1 roll sub 0.5 mul % dy/2
    rmoveto s show grestore
  end
} bind def
/lininterp {   % x1 x2 lininterp  ==>  x
	$glide mul exch    1.0 $glide sub mul add
} def
%%EndProlog
%%Page: 1 1
%%BeginPageSetup
%%EndPageSetup
blue setrgbcolor  0 0 xmax ymax rectfill
white 1.0 $fade sub blue $fade rgbmix setrgbcolor
xmid ymax 0.5 .65 lininterp mul
  /Helvetica-Bold   0.01 xmax 25 div lininterp
  (www.pjb.com.au/comp/free/) centreshow
xmax 0.3 mul xmid lininterp ymax .50 mul
  /Helvetica-Bold   0.01 xmax 25 div lininterp
  (www.pjb.com.au/comp) centreshow
xmax 0.7 mul xmid lininterp ymid ymax .35 mul lininterp
  /Helvetica-Bold   0.01 xmax 25 div lininterp
  (www.pjb.com.au) centreshow
showpage

%%EOF
EOT
	close P;
	wait;
}

sub frame2jpg { my $iframe = @_[$[];
	my $jpg_filename = next_filename();
	warn "\e[K iframe = $iframe   jpg_filename = $jpg_filename\e[A\n";
	eps2jpg(<<EOT, $jpg_filename);
%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 0 0 $Width $Height
%%BeginProlog
(/home/pjb/ps/lib/colours.ps) run

/nframes $NFrames def
/iframe $iframe def
/glide  iframe nframes div def
% NEED A sawtooth FUNCTION, eg  /glide  iframe  nframes div 5  sawtooth  def
% mul  then  2 mod   then if >1.0  2 exch sub    BUT PS mod is an integer op...
% iframe  wavelength  sawtooth    ==> wave 0.0...1.0  w. wavelength=wavelength
% use  round cvi  for defence
/xmax $Width def
/ymax $Height def
/xmid xmax 0.5 mul def
/ymid ymax 0.5 mul def

% The "Deterministic Algorithm" from "Fractals Everywhere",
% Michael Barnsley, Academic Press, p.88
% The IFS is   newx = a[k]*x + b[k]*y + e[k]; newy = c[k]*x + d[k]*y + f[k];
% So the IFS is specified by the arrays a,b,c,d,e, and p, and their dimension n
% can always mutate without changing image by adding a=1 b=0 c=0 d=1 e=0 f=0...
% the starting-image ...
/starting_image {
    0 0.5 moveto 1 0.5 lineto 0.5 0.5 moveto 0.5 0 lineto fill
} bind def
% recursion to plot points ...
/draw_image {
    save
    /numit numit 1 add def
    /k 0 def {
        numit numits ge {
            starting_image
        } {
            gsave
            [a k get b k get c k get d k get e k get f k get] concat draw_image
            grestore
        } ifelse
        /k k 1 add def k n ge { exit } if
    } loop
    restore
} bind def

/lininterp {   % x1 x2 lininterp  ==>  x
	glide mul exch    1.0 glide sub mul add
} def

%%EndProlog
%%Page: 1 1
%%BeginPageSetup
%%EndPageSetup
paleblue iframe palered nframes iframe sub rgbmix setrgbcolor
0 0 xmax ymax rectfill

black setrgbcolor
% the image ...
/numits 8 def
300 180 lininterp 30 70 lininterp translate
300 170 lininterp 300 180 lininterp scale
0.04 setlinewidth

/n 4 def
% tree
/a [ 0.0  0.636006 0.867611 lininterp
 0.8
 -0.126125 -0.117941 lininterp ] def
/b [ 0.0 0.1 0.0142173 lininterp
 -0.248083 -0.274496 lininterp
 0.32 ] def
/c [ 0.0  -0.00633124 -0.1 lininterp
 -0.280325 0.170752 lininterp
 0.3 0.075486 lininterp ] def
/d [ 0.442565 0.558696 lininterp
 0.858415 0.671206 lininterp
 0.480317 0.249985 lininterp
 0.199011 0.288812 lininterp ] def
/e [ 0.0  0.0   0.0   0.0 ] def
/f [ 0.0  0.607448 0.839695 lininterp
 0.144585 1.800000 lininterp
 0.387477 0.150000 lininterp ] def 

/numit 0 def
draw_image
showpage
%%EOF
EOT
	close P;
	wait;
}

sub next_filename {
	$FrameNumber += 1;
	my $filename = sprintf "t_%06d.jpg", $FrameNumber;
}

sub round { my $x = $_[$[];
	if ($x > 0.0) { return int ($x + 0.5); }
	if ($x < 0.0) { return int ($x - 0.5); }
	return 0;
}

__END__

=pod

=head1 NAME

make_connett_video - synthesises a video of John Connett's pattern

=head1 SYNOPSIS

 make_connett_video

=head1 DESCRIPTION

This script uses I<gs> to generate a jpg for each frame,
and then either I<avconv> or I<ffmpeg> or I<mencoder>
to put them together into an mp4 video.

In the following, the screen is covered with tiny squares,
size I<dx> times I<dx>.
aligned vertically and horizontally in rows and columns,
each square filled with one colour.
It is located at I<x,y>, with respect to an I<origin> at 0,0.
These coordinates I<x,y> and the I<origin> and I<dx> are in real screen-pixels, 
The colour is then chosen as follows:

  r^2 = x^2 + y^2               r = radial distance from the origin
  c = integer part of (a r^2)   where a is some constant
  color = c modulo (number of colors)

At first glance, the algorithm looks circularly symmetric,
and so should just paint concentric coloured rings.
Indeed when I<a> is small, that looks to be true - 
but as I<c> becomes greater than the number of colours,
then the fact that the squares are aligned in rows and columns
becomes important.

If I<y = 0> then, when I<c> is a multiple of I<ncolours>
the colour is the same as at the origin; 
indeed concentric coloured rings develop, just like round the origin, since

  if   (a x^2) modulo ncolours  =  0
  then (a x^2 + a y^2) modulo ncolours = a y^2 modulo ncolours

(In other words, r^2 has a Manhattan Metric,)
so a regular grid of concentric-rings appears

  a = ncolours / ( 2 * dx * grid )

(although I don't understand why the factor 2 is necessary ...)

As the grid size shrinks, larger-sacle metapatterns appear and
become more dominant.
The metapattern fills the screen when grid is an integer multiple of dx;
this is what happens as I<grid> approaches I<dx> at the end of the video.

=head1 OPTIONS

=over 3

=item I<-v>

Prints version number.

=back

=head1 CHANGES

 20170526  1.0  first working version

=head1 AUTHOR

Peter J Billam   http://www.pjb.com.au/comp/contact.html

=head1 CREDITS

Based on the algorithm by John E. Connett, of the University of Minnesota,
originally published by A. K. Dewdney in his "Computer Recreations" column
in the September 1986 issue of Scientific American.

=head1 SEE ALSO

 http://www.nahee.com/spanky/www/fractint/fractal_types.html
 http://www.nahee.com/spanky/www/fractint/circle_type.html
 https://www.jstor.org/stable/2686389?
 http://www.mpeters.de/mpeweb/hop/files/interfac.txt
 http://xochipilli.com/content/circlesquared/
 Dewdney's 'Computer Recreations' in Scientific American, Sept 1986
 https://en.wikipedia.org/wiki/Taxicab_geometry
 http://www.pjb.com.au/
 perl(1).

=cut

