#! /usr/bin/perl
#
#########################################################################
#        This Perl script is Copyright (c) 2013, Peter J Billam         #
#               c/o P J B Computing, www.pjb.com.au                     #
#     This script is free software; you can redistribute it and/or      #
#            modify it under the same terms as Perl itself.             #
#########################################################################
my $Version       = '1.7'; # use either avconv ffmpeg, or mencoder
my $VersionDate   = '20may2017';

# Movies on film are almost exclusively projected at 24 fps.
# Television, however, does not have an internationally accepted frame rate.
# In Europe and many other countries, PAL and SECAM use 25 fps,
# whereas NTSC video in North America and Japan uses 29.97 fps.
# Other common frame rates are usually multiples of these.

# The  metapattern fills the screen when grid is an integer multiple of dx
# This is what's responsible for the expanding circles toward the end...
# When grid < dx*1.002 then grid should converge on 2.0, then when it
# gets to grid < 2.000001 it should pause for a couple of seconds and finish

use File::Copy();
my $TmpDir        = "/tmp/connett_video.$$";
my $FrameNumber   = 0;      # used and incremented by next_filename()
my $Width         = '1600'; # or 1760
my $Height        = '900';  # or 1760
my $Fps           = 24.0;   # or  25         or 29.97 or  15
# my $NFrames       = 3500;   # or 500 or 1000 or 1000  or 1250 or 2700
my $NFrames       = 10000;   # or 500 or 1000 or 1000  or 1250 or 2700
my $Ratio         = 0.998;  # or .99 or .995 or .995  or .996
my $GridStart     = 2000;   # 2000
my $Dx            = 2;
my $TitleJpg      = '';
my $CreditsJpg    = '';
my $PrePad        = 5;      # seconds
my $PostPad       = 5;      # seconds
my $Mencoder      = which('mencoder');
my $Avconv        = which('avconv');
my $Ffmpeg        = which('ffmpeg');

while ($ARGV[$[] =~ /^-([a-z])/) {
	if ($1 eq 'v')      { shift;
		my $n = $0; $n =~ s{^.*/([^/]+)$}{$1};
		print "$n version $Version $VersionDate\n";
		exit 0;
	} elsif ($1 eq 't') { shift; $TitleJpg   = shift;
	} elsif ($1 eq 'c') { shift; $CreditsJpg = shift;
	} else {
		print "usage:\n";  my $synopsis = 0;
		while (<DATA>) {
			if (/^=head1 SYNOPSIS/)     { $synopsis = 1; next; }
			if ($synopsis && /^=head1/) { last; }
			if ($synopsis && /\S/)      { s/^\s*/   /; print $_; next; }
		}
		exit 0;
	}
}

if (!$Mencoder and !$Ffmpeg and !$Avconv) {
	die(" Sorry, can't find avconv, ffmpeg nor mencoder in your \$PATH\n");
}

my $grid = $GridStart;
if (! mkdir $TmpDir) { die "can't mkdir $TmpDir: $!\n"; }
# for the same reason, we copy TitleJpg and CreditsJpg into TmpDir
warn "TmpDir = $TmpDir\n";
if ($TitleJpg)   {
	if (! File::Copy::copy($TitleJpg, "$TmpDir/pre.jpg")) {
		die "can't copy $TitleJpg to $TmpDir/pre.jpg: $!\n";
	}
}
if ($CreditsJpg) {
	if (! File::Copy::copy($CreditsJpg, "$TmpDir/post.jpg")) {
		die "can't copy $CreditsJpg to $TmpDir/post.jpg: $!\n";
	}
}
if (! chdir $TmpDir) { die "can't chdir $TmpDir: $!\n"; }

if (! $TitleJpg)   { title2jpg(); }
#if ($TitleJpg)   {
	my $title_filename = next_filename();
	rename 'pre.jpg', $title_filename;
	my $num_title_frames = round($Fps*$PrePad - 3);
	foreach (1..$num_title_frames) {
		my $new_filename = next_filename();
		if (! link $title_filename, $new_filename) {
			die "can't link $title_filename, $new_filename : $!\n";
		}
	}
#}
for ($i=1; $i<=$NFrames; $i++) {
warn "i=$i\n";
	if ($grid > 2.007) {
		$grid = $grid * $Ratio;
		page2jpg($grid);
	} else {
		$grid = sqrt($grid * 2.002);
		page2jpg($grid);
		page2jpg(2.001);
		page2jpg(2.0005);
		page2jpg(2.00025);
		page2jpg(2.000125);
		page2jpg(2.000064);
		page2jpg(2.000032);
		page2jpg(2.000016);
		page2jpg(2.000008);
		page2jpg(2.000004);
		page2jpg(2.000002);
		page2jpg(2.000001);
		page2jpg(2.0);
		$grid = 2.0;
		last;
	}
}
if (! $CreditsJpg) { credits2jpg($grid); }
#if ($CreditsJpg) {
	my $credits_filename = next_filename();
	rename 'post.jpg', $credits_filename;
	my $num_creditframes = round($Fps*$PostPad - 1);
	foreach (1..$num_creditframes) {
		my $new_filename = next_filename();
		if (! link $credits_filename, $new_filename) {
			die "can't link $credits_filename, $new_filename : $!\n";
		}
	}
#}

if ($Avconv) {
	system "$Avconv -f image2 -r $Fps -i t_%06d.jpg "
	  . " -s ${Width}x$Height t.mp4";
} elsif ($Ffmpeg) {
	# "image2" is the image file demuxer,
	#   which reads from a list of image files specified by a pattern.
	system "$Ffmpeg -f image2 -r $Fps -i t_%06d.jpg "
	  . "-r $Fps -s ${Width}x$Height t.mp4";   # 1.7 worked first try :-)
} elsif ($Mencoder) {
	# mp3lame, faac and x264enc are not necessarily compiled in; pcm works.
	my $aspect = sprintf '%5g', $Width/$Height;
	system "$Mencoder -oac pcm -fps $Fps -ofps $Fps "
	  . "'mf://t_*.jpg' -mf h=$Height:w=$Width:fps=$Fps:type=jpeg "
	  .  "-o t.mp4 -ovc lavc -lavcopts vcodec=mpeg4:aspect=$aspect";
} else {
	die " BUG: shouldn't reach here...";
}

system "mplayer t.mp4";

warn "\n your video is: $TmpDir/t.mp4\n";

# clean up ?

exit;

sub which {
	my @PATH = split (":",$ENV{PATH});
	my $f; foreach $d (@PATH) {$f="$d/$_[$[]";  return $f if -x $f; }
}

sub eps2jpg {  my ($eps_text, $fn) = @_;
	if (!open(P,
	  "| gs -sDEVICE=jpeg -sOutputFile=$fn -q -g${Width}x$Height -r72 -" )) {
		die "sorry, can't run $gs: $!\n";
	}
	print P $eps_text; close P;
}

sub title2jpg {
	my $jpg_filename = 'pre.jpg';
#	if (! open(P, '|-', "eps2jpg > $jpg_filename")) {
#		die "can't run eps2jpg > $jpg_filename : $!\n";
#	}
#	print P <<EOT ;
	eps2jpg <<EOT , 'pre.jpg';
%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 0 0 $Width $Height
% http://www.pjb.com.au
%%BeginProlog
% (/home/pjb/ps/lib/fonts.ps) run
/xmax $Width def
/ymax $Height def
/xmid xmax 0.5 mul def
/ymid ymax 0.5 mul def
/centreshow { % usage: x y font fontsize (string) centreshow
  3 dict begin
    [ /s /fontsize /font ] { exch def } forall
    gsave moveto font findfont fontsize scalefont setfont
    gsave s false charpath flattenpath pathbbox grestore
    exch 4 -1 roll pop pop s stringwidth pop -0.5 mul  % dx/2
    3 1 roll sub 0.5 mul % dy/2
    rmoveto s show grestore
  end
} bind def
%%EndProlog
%%Page: 1 1
%%BeginPageSetup
%%EndPageSetup
% or /FatSimpleItalic from fonts.ps
xmid ymax .65 mul /Helvetica-BoldOblique xmax 13 div
  (John Connett's Pattern) centreshow
xmid ymax .47 mul /Helvetica-BoldOblique xmax 22 div
  (as the grid slowly shrinks . . .) centreshow
xmid ymax .32 mul /Helvetica-BoldOblique xmax 41 div
  (generated by the script make_connett_video) centreshow
xmid ymax .20 mul /Helvetica-BoldOblique xmax 35 div
  (written by  Peter Billam, 2017) centreshow
showpage
%%EOF
EOT
	close P;
	wait;
}

sub credits2jpg {
	my $grid = sprintf('%.2f', $_[$[]);
	eps2jpg(<<EOT, 'post.jpg');
%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 0 0 $Width $Height
% http://www.pjb.com.au
%%BeginProlog
(/home/pjb/ps/lib/fonts.ps) run
/xmax $Width def
/ymax $Height def
/xmid xmax 0.5 mul def
/ymid ymax 0.5 mul def
/centreshow { % usage: x y font fontsize (string) centreshow
  3 dict begin
    [ /s /fontsize /font ] { exch def } forall
    gsave moveto font findfont fontsize scalefont setfont
    gsave s false charpath flattenpath pathbbox grestore
    exch 4 -1 roll pop pop s stringwidth pop -0.5 mul  % dx/2
    3 1 roll sub 0.5 mul % dy/2
    rmoveto s show grestore
  end
} bind def
%%EndProlog
%%Page: 1 1
%%BeginPageSetup
%%EndPageSetup
xmid ymax .70 mul /Helvetica-Bold xmax 30 div
  (With dx=$Dx, the grid shrank from $GridStart to $grid) centreshow
xmid ymax .55 mul /Helvetica-Bold xmax 25 div
  (www.pjb.com.au/comp/free/) centreshow
xmid ymax .40 mul /Helvetica-Bold xmax 25 div
  (www.pjb.com.au/comp) centreshow
xmid ymax .25 mul /Helvetica-Bold xmax 25 div
  (www.pjb.com.au) centreshow
showpage

%%EOF
EOT
	close P;
	wait;
}

sub page2jpg { my $grid = @_[$[];  # generate the eps thence the jpg
	my $jpg_filename = next_filename();
	warn "grid = $grid   jpg_filename = $jpg_filename\n";
	eps2jpg(<<EOT, $jpg_filename);
%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 0 0 $Width $Height
%%BeginProlog
% (/home/pjb/ps/lib/colours.ps) run
/red         { 1    0    0    } def
/orange      { 1    0.7  0.0  } def
/yellow      { 1    1    0    } def
/green       { 0    1    0    } def
/blue        { 0    0    1    } def
/darkviolet  { 0.5  0.15 0.5  } def
/violet      { 0.7  0.2  0.7  } def
/rgbget {   % usage: [ red black grey ] 1 rgbget  ->  black
  /rgbget_i exch 3 mul def
  dup  rgbget_i        get exch
  dup  rgbget_i 1 add  get exch
       rgbget_i 2 add  get
} bind def

/rgblength {   % usage: [ red black grey ] rgblength  ->  3
  length 3 div cvi
} bind def

/connett {  % usage: x y width height dx [colours] xorigin yorigin grid connett
  % dx is the size in points of the little coloured squares: e.g.: 2, 3, 4 or 5
  % [xy]origin to place the pattern's origin within the rectangle
  % grid = the spacing of the grid, in points
  20 dict begin
  [/grid /yorigin /xorigin /colours /dx /height /width /y0 /x0]
    {exch def} forall
  /xmax x0 width  add def
  /ymax y0 height add def
  /ncolours colours rgblength def
  % I move to using grid-spacing instead of a as a parameter 
  /a ncolours dx div 0.5 mul grid div def
  /i x0 def {
    /j y0 def {
      /z  i xorigin sub dup mul  j yorigin sub  dup mul add  a mul def
      /c z floor cvi ncolours mod def  % c = z mod ncolours
      colours c rgbget setrgbcolor
      i j dx dx rectfill
      j ymax gt { exit } if     % ymax
      /j j dx add def
    } loop
    i xmax gt { exit } if       % xmax
    /i i dx add def
  } loop
  end
} bind def
/xmax $Width def
/ymax $Height def
/xmid xmax 0.5 mul def
/ymid ymax 0.5 mul def
%%EndProlog
%%Page: 1 1
%%BeginPageSetup
%%EndPageSetup
0 0 xmax ymax $Dx [red orange yellow green blue violet darkviolet]
 xmid ymid   $grid   connett
showpage
%%EOF
EOT
	close P;
	wait;
}

sub next_filename {
	$FrameNumber += 1;
	my $filename = sprintf "t_%06d.jpg", $FrameNumber;
}

sub round { my $x = $_[$[];
	if ($x > 0.0) { return int ($x + 0.5); }
	if ($x < 0.0) { return int ($x - 0.5); }
	return 0;
}

__END__

